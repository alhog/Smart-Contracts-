const express = require('express');
const bodyParser = require('body-parser');
const jwt = require('jsonwebtoken');
const config = require('./config');
const { authenticateToken } = require('./middleware');
const app = express();
app.use(bodyParser.json());

// Mock user database (replace with database integration)
const users = [];

// User Registration Endpoint
app.post('/register', (req, res) => {
    const { username, password } = req.body;
    // Check if username is already taken
    if (users.find(user => user.username === username)) {
        return res.status(400).json({ error: 'Username is already taken' });
    }
    // Add user to the database
    const newUser = { id: users.length + 1, username, password };
    users.push(newUser);
    res.status(201).json({ message: 'User registered successfully', user: newUser });
});

// User Login Endpoint
app.post('/login', (req, res) => {
    const { username, password } = req.body;
    // Find user in the database
    const user = users.find(user => user.username === username && user.password === password);
    if (!user) {
        return res.status(401).json({ error: 'Invalid username or password' });
    }
    // Generate JWT token
    const token = jwt.sign({ id: user.id, username: user.username }, config.secretKey);
    res.json({ token });
});

// Protected Route
app.get('/profile', authenticateToken, (req, res) => {
    res.json(req.user); // Send user information from JWT token
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
