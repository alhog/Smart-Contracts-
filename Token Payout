pragma solidity ^0.8.0;

contract TokenPayout {
    mapping(address => uint256) public balances;
    address public owner;

    event TokensTransferred(address indexed from, address indexed to, uint256 value);

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only contract owner can perform this action");
        _;
    }

    function transferTokens(address _to, uint256 _value) public onlyOwner {
        require(_to != address(0), "Invalid address");
        require(_value > 0 && _value <= balances[msg.sender], "Insufficient balance");

        balances[msg.sender] -= _value;
        balances[_to] += _value;

        emit TokensTransferred(msg.sender, _to, _value);
    }

    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }
}
