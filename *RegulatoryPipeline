import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
import hashlib
import datetime

class DataPipeline:
    def __init__(self):
        self.modules = []
        self.audit_log = []

    def add_module(self, module):
        self.modules.append(module)

    def execute_pipeline(self, data):
        processed_data = data
        for module in self.modules:
            processed_data = module.process_data(processed_data)
            self.audit_log.append({
                'module': type(module).__name__,
                'timestamp': datetime.datetime.now(),
                'input_data_hash': hash(str(processed_data))
            })
        return processed_data

class DataModule:
    def process_data(self, data):
        raise NotImplementedError("Subclasses must implement process_data method.")

class DataIngestionModule(DataModule):
    def process_data(self, data):
        # Logic for data ingestion
        # Assuming data is a file path or URL
        df = pd.read_csv(data, dtype=str)  # Read data as strings for better compliance
        print("Data ingestion module: Data ingested successfully.")
        return df

class DataCleaningModule(DataModule):
    def process_data(self, data):
        # Logic for data cleaning
        df = data.dropna(subset=data.columns[data.dtypes != 'object'])  # Drop rows with missing values in numerical columns only
        print("Data cleaning module: Data cleaned successfully.")
        return df

class DataEnrichmentModule(DataModule):
    def process_data(self, data):
        # Logic for data enrichment
        # Assume we need to encode categorical variables
        categorical_cols = data.select_dtypes(include=['object']).columns
        encoder = LabelEncoder()
        for col in categorical_cols:
            data[col] = encoder.fit_transform(data[col])
        print("Data enrichment module: Data enriched successfully.")
        return data

class DataRefinementModule(DataModule):
    def process_data(self, data):
        # Logic for data refinement
        # Assume we need to handle missing numerical values
        numerical_cols = data.select_dtypes(include=['float64', 'int64']).columns
        imputer = SimpleImputer(strategy='constant', fill_value='MISSING')  # Use a designated value for missing data
        for col in numerical_cols:
            data[col] = imputer.fit_transform(data[col].values.reshape(-1, 1))
        print("Data refinement module: Data refined successfully.")
        return data

class DataValidationModule(DataModule):
    def process_data(self, data):
        # Logic for data validation
        # Assume we need to check for duplicate rows and compliance with data standards
        if data.duplicated().sum() > 0:
            print("Warning: Duplicate rows found in the data.")
        if not data.columns.isin(['name', 'address', 'phone', 'email']).all():
            print("Warning: Data does not comply with expected column names.")
        else:
            print("Data validation module: Data validated successfully.")
        return data

class DataIntegrationModule(DataModule):
    def process_data(self, data):
        # Logic for data integration
        # Assume we need to merge data from multiple sources
        other_data = pd.read_csv('other_data.csv')
        merged_data = pd.merge(data, other_data, on='id', how='left')
        print("Data integration module: Data integrated successfully.")
        return merged_data

class DataAnonymizationModule(DataModule):
    def process_data(self, data):
        # Logic for data anonymization
        # Assume we need to anonymize sensitive data
        sensitive_cols = ['name', 'address', 'phone', 'email']
        for col in sensitive_cols:
            data[col] = hashlib.sha256(data[col].astype(str).values).hexdigest()
        print("Data anonymization module: Data anonymized successfully.")
        return data

class DataEncryptionModule(DataModule):
    def process_data(self, data):
        # Logic for data encryption
        # Assume we need to encrypt the data for secure storage
        encrypted_data = data.apply(lambda x: hashlib.sha256(x.astype(str).values).hexdigest())
        print("Data encryption module: Data encrypted successfully.")
        return encrypted_data

class DataAuditingModule(DataModule):
    def process_data(self, data):
        # Logic for data auditing
        # Assume we need to log data changes for auditing purposes
        current_hash = hash(str(data))
        previous_hash = self.audit_log[-1]['input_data_hash'] if self.audit_log else None
        if previous_hash and current_hash != previous_hash:
            print(f"Warning: Data has been modified. Previous hash: {previous_hash}, Current hash: {current_hash}")
        else:
            print("Data auditing module: Data audited successfully.")
        return data

# Rest of the main script remains the same
