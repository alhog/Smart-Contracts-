# Module: GeometricDataPackets.py
# This module defines geometric data packet classes for various shapes.

class GeometricDataPacket:
    def __init__(self, shape, data):
        self.shape = shape
        self.data = data

    def process_data(self):
        # Process the data based on the shape
        # Placeholder for the data processing logic
        pass

    def combine(self, other_packet):
        # Combine two geometric data packets
        # Placeholder for the combination logic
        pass

# Factory function to create geometric data packets
def create_geometric_data_packet(shape, data):
    valid_shapes = ['triangle', 'circle', 'semi-circle', 'square', 'rectangle',
                    'parallelogram', 'rhombus', 'trapezium', 'kite', 'polygon']
    if shape in valid_shapes:
        return GeometricDataPacket(shape, data)
    else:
        raise ValueError("Invalid shape. Must be one of the predefined shapes.")

# Example usage
triangle_data = {'type': 'transaction', 'amount': 100}
circle_data = {'type': 'continuous data stream', 'frequency': 'high'}

triangle_packet = create_geometric_data_packet('triangle', triangle_data)
circle_packet = create_geometric_data_packet('circle', circle_data)

# Example of combining packets
combined_packet = triangle_packet.combine(circle_packet)
