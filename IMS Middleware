// Import necessary modules
const jwt = require('jsonwebtoken');
const config = require('./config'); // Configuration file for JWT secret key

// Middleware function to authenticate user token
function authenticateToken(req, res, next) {
    // Get the token from the authorization header
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    // If token is not provided, return 401 Unauthorized
    if (token == null) return res.sendStatus(401);

    // Verify the token using JWT
    jwt.verify(token, config.secretKey, (err, user) => {
        // If token verification fails, return 403 Forbidden
        if (err) return res.sendStatus(403);
        // Store user information in request object for further processing
        req.user = user;
        next(); // Proceed to the next middleware or route handler
    });
}

// Middleware function to authorize user access
function authorizeUser(req, res, next) {
    // Check if user is authorized (e.g., based on user role or permissions)
    // Example: Check if user role is 'admin' to access protected routes
    if (req.user && req.user.role === 'admin') {
        next(); // User is authorized, proceed to the next middleware or route handler
    } else {
        // User is not authorized, return 403 Forbidden
        res.sendStatus(403);
    }
}

module.exports = { authenticateToken, authorizeUser };
